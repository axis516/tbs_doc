
#Область ПринятьДанные
Функция ПринятьДанные(Хранилище, ТекстОшибки)

	
	УстановитьПривилегированныйРежим(Истина);
	
	//ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	//ОбработкаОбмена.РежимОбмена = "Загрузка";
	//
	//РаботаВозможна = ОбработкаОбмена.ВыполнитьДействияПередЧтениемДанных(Данные.Получить());
	//
	//Если НЕ РаботаВозможна Тогда
	//	Возврат 0;
	//КонецЕсли;	

	//ОбработкаОбмена.ПроизвестиЧтениеДанных(ТекстОшибки);
	//
	//ОбработкаОбмена.ВыполнитьДействияПослеЗавершенияЧтенияДанных(); 
	
	Данные = Хранилище.Получить();
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("Результат");
	
	Структура = Новый Структура;
	Результат = 0;	
	Для каждого мСтрока Из Данные Цикл
		Сотрудник = Справочники.ФизическиеЛица.НайтиПоНаименованию(мСтрока.Наименование);
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Наименование = мСтрока.Наименование;
		НоваяСтрока.Результат    = Истина;
		Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
			НоваяСтрока.Результат    = Ложь;
			Результат = 1;
		Иначе
			СформироватьУведомления(мСтрока,Сотрудник,НоваяСтрока);
		КонецЕсли; 
	КонецЦикла;
	
	ТекстОшибки = Новый ХранилищеЗначения(ТЗ, Новый СжатиеДанных(9));
	
	Возврат Результат; //Сериализовать(Структура);
	
КонецФункции

Функция ОтдатьДанные(ПравилаОбмена, ПравилаВыгрузкиXDTO, ЗначенияПараметровXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПараметров = СериализаторXDTO.ПрочитатьXDTO(ЗначенияПараметровXDTO);
	
	РезультатЗапроса = СформироватьПодготовленКОтправке(ЗначенияПараметров.НачалоПериода,ЗначенияПараметров.КонецПериода);
	
	ХранилищеДанных = Новый ХранилищеЗначения(РезультатЗапроса, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;
	
КонецФункции 

Функция ОтдатьДанные_(ПравилаОбмена, ПравилаВыгрузкиXDTO, ЗначенияПараметровXDTO)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Иницализация
	Обмен = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обмен.РежимОбмена = "Выгрузка";
	ИмяВремФайла = ПолучитьИмяВременногоФайла("xml");
	Обмен.ИмяФайлаОбмена = ИмяВремФайла;
	
	// Загрузка правил
	ИмяФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаПравилОбмена);
	ЗаписьТекста.Записать(ПравилаОбмена.Получить());
	ЗаписьТекста.Закрыть();
	Обмен.ИмяФайлаПравилОбмена = ИмяФайлаПравилОбмена;
	Обмен.ЗагрузитьПравилаОбмена();
	
	// Параметры
	ЗначенияПараметров = СериализаторXDTO.ПрочитатьXDTO(ЗначенияПараметровXDTO);
	Если ЗначениеЗаполнено(ЗначенияПараметров) Тогда
		Для каждого КлючИЗнач Из ЗначенияПараметров Цикл
			Обмен.УстановитьЗначениеПараметраВТаблице(КлючИЗнач.Ключ, КлючИЗнач.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	// Правила выгрузки данных
	ПравилаВыгрузки = СериализаторXDTO.ПрочитатьXDTO(ПравилаВыгрузкиXDTO);
	Если ЗначениеЗаполнено(ПравилаВыгрузки) Тогда
		
		// Сначала снимаем все отметки
		Для Каждого Строка из Обмен.ТаблицаПравилВыгрузки.Строки Цикл
			Строка.Включить = 0;
			Обмен.УстановитьПометкиПодчиненных(Строка, "Включить");
		КонецЦикла;
		
		// Теперь устанавливаем по переданным ПВД
		Для каждого ИмяПравилаВыгрузки Из ПравилаВыгрузки Цикл
			СтрДерева = Обмен.ТаблицаПравилВыгрузки.Строки.Найти(ИмяПравилаВыгрузки, "Имя", Истина);
			Если СтрДерева = Неопределено Тогда
				ВызватьИсключение "ОбменДаннымиXML.ОтдатьДанныеXML(): не удалось найти ПВД """ + ИмяПравилаВыгрузки + """!";
			Иначе
				СтрДерева.Включить = 1;
				Обмен.УстановитьПометкиРодителей(СтрДерева, "Включить");
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Выгрузка
	Обмен.ВыполнитьВыгрузку();	
	
	// Конец
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяВремФайла, КодировкаТекста.UTF8);
	
	Результат = ЧтениеТекста.Прочитать();
	
	ЧтениеТекста.Закрыть();
	
	УдалитьФайлы(ИмяВремФайла);
	УдалитьФайлы(ИмяФайлаПравилОбмена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	Возврат ХранилищеДанных;
	
КонецФункции 

//////////СформироватьСтатусУведомления///////////////////////////////////////
//
// Процедура СформироватьСтатусУведомления
//
// Описание: Запись в регистр сведений
//
//
// Параметры (Выборка,Документ)
//
&НаСервере
Процедура СформироватьУведомления(мСтрока,Сотрудник,НоваяСтрока)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТБС_СостоянияОбменовДаннымиДО.Сотрудник
	|ИЗ
	|	РегистрСведений.ТБС_СостоянияОбменовДаннымиДО КАК ТБС_СостоянияОбменовДаннымиДО
	|ГДЕ
	|	ТБС_СостоянияОбменовДаннымиДО.Сотрудник = &Сотрудник
	|	И ТБС_СостоянияОбменовДаннымиДО.ДатаНачала = &ДатаНачала
	|	И ТБС_СостоянияОбменовДаннымиДО.ДатаОкончания = &ДатаОкончания";
	Запрос.УстановитьПараметр("Сотрудник",     Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала",    мСтрока.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", мСтрока.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НаборЗаписи = РегистрыСведений.ТБС_СостоянияОбменовДаннымиДО.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НаборЗаписи,мСтрока);
		НаборЗаписи.Период    = ТекущаяДата();
		НаборЗаписи.Статус    = Перечисления.СтатусыПакетовЭД.РаспакованДокументыНеОбработаны;
		НаборЗаписи.Сотрудник = Сотрудник.Ссылка;
		НаборЗаписи.Записать(Ложь);
	Иначе
		НоваяСтрока.Результат = Ложь;
	КонецЕсли; 

КонецПроцедуры //СформироватьСтатусУведомления

&НаСервере
Функция СформироватьПодготовленКОтправке(НачалоПериода,КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОбменовДанными.Период,
	|	СостоянияОбменовДанными.Организация,
	|	СостоянияОбменовДанными.Сотрудник,
	|	СостоянияОбменовДанными.КоличествоДней,
	|	СостоянияОбменовДанными.Статус,
	|	СостоянияОбменовДанными.Содержание,
	|	СостоянияОбменовДанными.ДатаНачала,
	|	СостоянияОбменовДанными.ДатаОкончания,
	|	СостоянияОбменовДанными.Документ
	|ПОМЕСТИТЬ ДанныеДляУведомлений
	|ИЗ
	|	РегистрСведений.ТБС_СостоянияОбменовДаннымиДО.СрезПоследних(&КонецПериода, ) КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляУведомлений.Период,
	|	ДанныеДляУведомлений.Организация,
	|	ДанныеДляУведомлений.Сотрудник,
	|	ДанныеДляУведомлений.Сотрудник.Наименование КАК Наименование,
	|	ДанныеДляУведомлений.КоличествоДней,
	|	ДанныеДляУведомлений.Статус,
	|	ДанныеДляУведомлений.Содержание,
	|	ДанныеДляУведомлений.ДатаНачала,
	|	ДанныеДляУведомлений.ДатаОкончания,
	|	ДанныеДляУведомлений.Документ,
	|	ЛОЖЬ КАК ПереносОтпуска,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПереносДата,
	|	0 КАК ПереносДней,
	|	ПОДСТРОКА("""", 0, 150) КАК ПричинаПереноса,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДляУведомлений.Документ)
	|ИЗ
	|	ДанныеДляУведомлений КАК ДанныеДляУведомлений
	|ГДЕ
	|	ДанныеДляУведомлений.ДатаНачала МЕЖДУ &НачалоПериода И &КонецПериода";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого мСтрока Из РезультатЗапроса Цикл
		Структура = ТБС_ОбщегоНазначения.ПолучитьДополнительныеРеквизитыДокумента(мСтрока.Документ);
		Если Структура.Свойство("ПереносДата") Тогда
			мСтрока.ПричинаПереноса = Структура.ПричинаПереноса;
			мСтрока.ПереносДней     = Структура.ПереносДней;
			мСтрока.ПереносДата     = Структура.ПереносДата;
			Если ЗначениеЗаполнено(Структура.ПереносДата) Тогда
				мСтрока.ПереносОтпуска = Истина;
			КонецЕсли; 
		КонецЕсли; 
		мСтатус = Перечисления.СтатусыПакетовЭД.Отправлен;;
		ТБС_ОбщегоНазначения.СформироватьСтатусУведомления(мСтрока,мСтрока.Документ,мСтатус);
	КонецЦикла; 
	
	Возврат РезультатЗапроса;
	
КонецФункции //СформироватьУведомленияНаОтпуск

#КонецОбласти
