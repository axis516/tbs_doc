
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаПриоритетныхДанных");
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	Для Каждого мСтрока Из Исполнители Цикл
		Если НЕ ЗначениеЗаполнено(мСтрока.Исполнитель) Тогда
			Отказ = Истина;
			ТекстСообщения = "ru = 'в табличной части не указан исполнитель'";
			СообщитьПользователю(ТекстСообщения,"Исполнитель",Отказ);
		КонецЕсли;
		
		Если Статус = Перечисления.ТБС_СтатусыЗаявкиIT.Новая 
			И ЗначениеЗаполнено(мСтрока.Исполнитель) Тогда
			Статус = Перечисления.ТБС_СтатусыЗаявкиIT.НазначенИсполнитель;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не Отказ Тогда
		Если Исполнители.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,Исполнители[0]);
		КонецЕсли; 
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Для Каждого мСтрока Из Исполнители Цикл
		 СформироватьБизнесПроцесс(мСтрока.Исполнитель);
	КонецЦикла;                    
	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонтактнаяИнформацияПользователя(Пользователь) Экспорт 
	
	    Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Пользователь
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя)";
		Запрос.УстановитьПараметр("Пользователь",Пользователь);
		РезультатЗапроса = Запрос.Выполнить();
		
		Представление = "";
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Представление = Выборка.Представление;
		КонецЦикла; 
		
		Возврат Представление;
		
КонецФункции

Функция СообщитьПользователю(Текст,Параметр,Отказ)
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр(Текст),
	Строка(Ответственный));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	ТекстСообщения,
	ЭтотОбъект,
	Параметр,,
	Отказ);
	
КонецФункции

#КонецОбласти

#Область БизнесПроцесс
Функция СформироватьБизнесПроцесс(Исполнитель)
	
	мБизнесПроцессСуществует = БизнесПроцессСуществует(Исполнитель);	
	
	Если Не мБизнесПроцессСуществует Тогда
		УстановитьПривилегированныйРежим(Истина);
		СтартоватьБизнесПроцессИсполнение(Исполнитель);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
КонецФункции

Функция БизнесПроцессСуществует(Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсполнениеПредметы.Ссылка
		|ИЗ
		|	БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.Исполнение.Исполнители КАК ИсполнениеИсполнители
		|		ПО ИсполнениеПредметы.Ссылка = ИсполнениеИсполнители.Ссылка
		|ГДЕ
		|	ИсполнениеПредметы.Предмет = &Предмет
		|	И ИсполнениеИсполнители.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("Предмет",     Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция СтартоватьБизнесПроцессИсполнение(Исполнитель)
	
	ИсполнениеОбъект          = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Автор    = Ссылка.Ответственный;
	ИсполнениеОбъект.Важность = Ссылка.Важность;
	ИсполнениеОбъект.ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	ИсполнениеОбъект.Дата              = ТекущаяДата();
	ИсполнениеОбъект.ДатаНачала        = ИсполнениеОбъект.Дата;
	ИсполнениеОбъект.Контролер         = Ссылка.Ответственный;
	ИсполнениеОбъект.Наименование      = "Исполнить " +  Строка(Ссылка);
	ИсполнениеОбъект.Описание          = Ссылка.Описание;
	ИсполнениеОбъект.Проверяющий       = Ссылка.Ответственный;
	
	НовыйПредмет = ИсполнениеОбъект.Предметы.Добавить();
	НовыйПредмет.Предмет      = Ссылка;
	НовыйПредмет.ИмяПредмета  = Ссылка;
	НовыйПредмет.РольПредмета = Перечисления.РолиПредметов.Основной;
	НовыйПредмет.ИмяПредмета  =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Ссылка, ИсполнениеОбъект.Предметы.ВыгрузитьКолонку("ИмяПредмета"));
				
	ПредметыЗадач = ИсполнениеОбъект.ПредметыЗадач.Добавить();
	ПредметыЗадач.ИмяПредмета   = НовыйПредмет.ИмяПредмета;
	ПредметыЗадач.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить;	
	
	НоваяСтрока = ИсполнениеОбъект.Исполнители.Добавить();
	НоваяСтрока.Исполнитель = Исполнитель;
	
	ИсполнениеОбъект.УдалитьПредмет = Ссылка;
	ИсполнениеОбъект.Записать();
	
	СтартПроцессовСервер.СтартоватьПроцесс(ИсполнениеОбъект);
	
	СтартоватьБизнесПроцессОзнакомление(Исполнитель);
	
КонецФункции

Функция СтартоватьБизнесПроцессОзнакомление(Исполнитель)
	
	ОзнакомлениеОбъект                   = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Автор    		 = Исполнитель;
	ОзнакомлениеОбъект.Важность 		 = Ссылка.Важность;
	ОзнакомлениеОбъект.Дата              = ТекущаяДата();
	ОзнакомлениеОбъект.ДатаНачала        = ОзнакомлениеОбъект.Дата;
	ОзнакомлениеОбъект.Наименование      = "Ознакомиться, назначен исполнитель: " + Строка(Исполнитель) + " " +  Строка(Ссылка);
	ОзнакомлениеОбъект.Описание          = Ссылка.Описание;
	
	НовыйПредмет = ОзнакомлениеОбъект.Предметы.Добавить();
	НовыйПредмет.Предмет      = Ссылка;
	НовыйПредмет.ИмяПредмета  = Ссылка;
	НовыйПредмет.РольПредмета = Перечисления.РолиПредметов.Основной;
		
	НоваяСтрока = ОзнакомлениеОбъект.Исполнители.Добавить();
	НоваяСтрока.Исполнитель = Ссылка.Ответственный;
	
	ОзнакомлениеОбъект.Записать();
	
	СтартПроцессовСервер.СтартоватьПроцесс(ОзнакомлениеОбъект);
	
КонецФункции


#КонецОбласти

