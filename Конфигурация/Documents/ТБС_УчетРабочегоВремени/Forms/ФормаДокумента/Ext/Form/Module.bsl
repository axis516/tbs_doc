
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда 
			Объект.Сотрудник = ТекущийПользователь;
		КонецЕсли;	
				
		Объект.Автор = ТекущийПользователь;
		
		ЗаполнитьНачалоИОкончаниеДня(Объект);
		
		ОбновитьДанныеПоСотруднику();
		
		Элементы.ФормаПоказатьВСписке.Доступность = Ложь;
		
	КонецЕсли;
	
	// формирование заголовка формы
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	РассчитатьПродолжительность(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СформироватьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РаботыПродолжительностьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	РассчитатьПродолжительностьДня(ТекущиеДанные.ВремяНачала,ТекущиеДанные.ВремяОкончания,ТекущиеДанные.Продолжительность,ТекущиеДанные.Длительность);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыВремяОкончанияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	РассчитатьПродолжительностьДня(ТекущиеДанные.ВремяНачала,ТекущиеДанные.ВремяОкончания,ТекущиеДанные.Продолжительность,ТекущиеДанные.Длительность);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 	
		
		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;    	
		Строка = Объект.Работы.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		Индекс = Объект.Работы.Индекс(Строка);
		Если Индекс > 0 Тогда 
			ТекущиеДанные.ВремяНачала = Объект.Работы[Индекс-1].ВремяОкончания;
			Shell= Новый COMОбъект("Wscript.Shell");
			Shell.SendKeys("{TAB}");
		Иначе
			ТекущиеДанные.ВремяНачала = Объект.НачалоДня;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОбновитьДанныеПоСотруднику();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНачалоИОкончаниеДня(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда 
		Возврат;
	КонецЕсли;	
	
	ГрафикРаботы = ГрафикиРаботы.ПолучитьГрафикРаботыПользователя(Объект.Сотрудник);
	СтруктураВозврата = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Объект.Дата, ГрафикРаботы);
	
	Если ЗначениеЗаполнено(СтруктураВозврата.НачалоДня) Тогда 
		Объект.НачалоДня = СтруктураВозврата.НачалоДня;
		Объект.НачалоДня = Объект.НачалоДня - Секунда(Объект.НачалоДня);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураВозврата.ОкончаниеДня) Тогда 
		Объект.ОкончаниеДня = СтруктураВозврата.ОкончаниеДня;
		Объект.ОкончаниеДня = Объект.ОкончаниеДня - Секунда(Объект.ОкончаниеДня);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРаботПоШаблону()
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	ТБС_ШаблоныРабот.ОписаниеРабот.Наименование КАК Наименование
	 |ИЗ
	 |	РегистрСведений.ТБС_ШаблоныРабот КАК ТБС_ШаблоныРабот
	 |ГДЕ
	 |	ТБС_ШаблоныРабот.Сотрудник = &Сотрудник";
	 Запрос.УстановитьПараметр("Сотрудник",Объект.Сотрудник);
	 РезультатЗапроса = Запрос.Выполнить();
	 
	 СписокЗначений = Новый СписокЗначений;
	 СписокЗначений.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Наименование"));
	 
	 Возврат СписокЗначений;
	 
КонецФункции

&НаКлиенте
Процедура РаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элемент.ТекущиеДанные.СодержаниеРабот = ВыбранноеЗначение;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьПродолжительностьДня(НачалоДня,ОкончаниеДня,Продолжительность,Длительность)
	
	Если Не ЗначениеЗаполнено(НачалоДня) Или Не ЗначениеЗаполнено(ОкончаниеДня) Тогда 
		Длительность = "";
	ИначеЕсли НачалоДня > ОкончаниеДня Тогда 
		Длительность = "";
	Иначе	
		Длительность = УчетВремениКлиентСервер.ЧислоВСтроку(ОкончаниеДня - НачалоДня);
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(Объект.ОкончаниеДня - Объект.НачалоДня);
	КонецЕсли;
	
	Если Продолжительность = Неопределено Тогда
		Возврат Длительность;
	Иначе
		Продолжительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Длительность);
	КонецЕсли; 	
	
	ОбновитьПодвал();
	
КонецФункции	

&НаКлиенте
Процедура РассчитатьПродолжительность()
	
	Для Каждого мСтрока Из Объект.Работы Цикл
		РассчитатьПродолжительностьДня(мСтрока.ВремяНачала,мСтрока.ВремяОкончания,Неопределено,мСтрока.Длительность)
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыСодержаниеРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Справочник.ТБС_ОписаниеРабот.ФормаВыбора",,Элементы.Работы);
	
	УстановитьОтборФормы(ФормаВыбора.ЭтаФорма.Список);
	
	ФормаВыбора.ЭтотОбъект.Элементы.Список.Отображение = ОтображениеТаблицы.Список;	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()
	
    Если Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Учет рабочего времени (создание)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Учет рабочего времени за'") + " " + Формат(Объект.Дата, "ДЛФ=D");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСотруднику()
	
	Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(Объект.Сотрудник);
	Объект.Должность     = РаботаСПользователями.ПолучитьДолжность(Объект.Сотрудник);
	Объект.Дивизион      = Объект.Подразделение.ТБС_Дивизион;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал()
	
	// вывод строки Всего за день
	ДлительностьРаботСек = 0;
	Для Каждого Строка Из Объект.Работы Цикл
		ДлительностьРаботСек = ДлительностьРаботСек + Строка.Продолжительность;
	КонецЦикла;
	ДлительностьРабот = НСтр("ru = 'Всего за день'") + " " + УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0");
	
	// вывод строки Превышено \ Осталось
	ПродолжительностьДняСек = Объект.ОкончаниеДня - Объект.НачалоДня;
	ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(Объект.ОкончаниеДня - Объект.НачалоДня);
	
	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда 
		СообщениеОшибки = "";
		
	ИначеЕсли ДлительностьРаботСек > ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(превышено на %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек - ПродолжительностьДняСек));
		
	ИначеЕсли ДлительностьРаботСек < ПродолжительностьДняСек Тогда 
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(осталось %1)'"),
			УчетВремениКлиентСервер.ЧислоВСтроку(ПродолжительностьДняСек - ДлительностьРаботСек));
		
	Иначе
		СообщениеОшибки = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборФормы(мСписок)
	
	ОтборВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	мСписокОтбора     = ПолучитьСписокРаботПоШаблону();
	
	Если мСписокОтбора.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		мСписок, "Наименование",мСписокОтбора,
		ОтборВидСравнения, , Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти