
#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Отказ = ПроверкаДанныхЗаполнения();
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда 
		
		ТекстСообщения = "ru = 'Для пользователя %1 не указано Подразделение!'";
		СообщитьПользователю(ТекстСообщения,"Пользователь",Отказ);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// заполнение поля длительность
	Если Ссылка.Работы.Количество() > 0 Тогда
		//заполнение полей начало дня и окончание дня
		мРаботы = ЭтотОбъект.Работы.Выгрузить();
		мРаботы.Сортировать("ВремяНачала Возр");
		НачалоДня = мРаботы[0].ВремяНачала;
		//
		мРаботы.Сортировать("ВремяОкончания Убыв");
		ОкончаниеДня = мРаботы[0].ВремяОкончания;
		
		Для Каждого Строка Из Работы Цикл
			Если Строка.ВремяОкончания > Строка.ВремяНачала Тогда 
				Строка.Продолжительность = Строка.ВремяОкончания - Строка.ВремяНачала;
			Иначе
				Строка.Продолжительность = 0;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	// общая длительность работ для вывода в журнал
	ДлительностьРаботСек = Работы.Итог("Продолжительность");
	ДлительностьРабот = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек);
	
	// проверка суммарной длительности для вывода в журнал
	Если Не ЗначениеЗаполнено(НачалоДня) Или Не ЗначениеЗаполнено(ОкончаниеДня) Или (НачалоДня > ОкончаниеДня) Тогда 
		НекорректнаяДлительность = Истина;
	Иначе    	
		ПродолжительностьДняСек = ОкончаниеДня - НачалоДня;
		
		НекорректнаяДлительность = (ДлительностьРаботСек <> ПродолжительностьДняСек);
	КонецЕсли;
	
	Для Каждого Строка1 Из Работы Цикл
		ЕстьПозднее = Ложь;
		ЕстьПропуски = Истина;
		
		Для Каждого Строка2 Из Работы Цикл
			Если Работы.Индекс(Строка1) = Работы.Индекс(Строка2) Тогда 
				Продолжить;
			КонецЕсли;	
			
			Если Строка2.ВремяНачала >= Строка1.ВремяОкончания Тогда 
				ЕстьПозднее = Истина;
			КонецЕсли;	
			
			Если Строка2.ВремяНачала = Строка1.ВремяОкончания Тогда 
				ЕстьПропуски = Ложь;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЕстьПозднее И ЕстьПропуски Тогда 
			НекорректнаяДлительность = Истина;
			ТекстСообщения = "ru = 'в табличной части период введен некорректно'";
			СообщитьПользователю(ТекстСообщения,"Период",Отказ);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Отказ = ПроверкаДанныхЗаполнения();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр УчетРабочегоВремени
	Движения.ТБС_УчетРабочегоВремени.Записывать = Истина;
	Для Каждого ТекСтрокаРаботы Из Работы Цикл
		
		Движение							= Движения.ТБС_УчетРабочегоВремени.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаРаботы);
		Движение.Дата						= Дата;
		Движение.Дивизион					= Дивизион;
		Движение.Сотрудник					= Сотрудник;
		Движение.Подразделение				= Подразделение;
		Движение.Должность					= Должность;
		Движение.НачалоДня					= НачалоДня;
		Движение.ОкончаниеДня				= ОкончаниеДня;
		Движение.Длительность               = Движение.Длительность + (ОкончаниеДня - НачалоДня);
		Движение.СоставРабот				= ТекСтрокаРаботы.СодержаниеРабот.СоставРабот;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверкаДанныхЗаполнения()
	
	Отказ = Ложь;
	Если ЕстьЕжедневныеОтчетыТекущейДаты() Тогда 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ежедневный отчет на дату %1 уже был введен ранее!'"),
		Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		ЭтотОбъект,
		"Дата",, 
		Отказ);
		
	КонецЕсли;
	Возврат Отказ;
	
КонецФункции //ПроверкаДанныхЗаполнения

Функция ЕстьЕжедневныеОтчетыТекущейДаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетРабочегоВремени.Ссылка
	|ИЗ
	|	Документ.ТБС_УчетРабочегоВремени КАК УчетРабочегоВремени
	|ГДЕ
	|	УчетРабочегоВремени.Сотрудник = &Сотрудник
	|	И НАЧАЛОПЕРИОДА(УчетРабочегоВремени.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И УчетРабочегоВремени.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Дата", 	   Дата);
	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Ссылка.Сотрудник);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СообщитьПользователю(Текст,Параметр,Отказ)
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр(Текст),
	Строка(Сотрудник));
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	ТекстСообщения,
	ЭтотОбъект,
	Параметр,,
	Отказ);
	
КонецФункции

#КонецОбласти